# cargo-deny configuration for production Rust projects
# Enforces strict dependency management, security, and license compliance

[graph]
# If 1 or more target triples are specified, only the dependencies for those
# targets will be checked. This means, if a particular package is only ever used
# as a target specific dependency, it will be ignored if the its target triple
# is not specified in `targets`
targets = [
    "x86_64-unknown-linux-gnu",
    "x86_64-apple-darwin",
    "aarch64-apple-darwin",
    "x86_64-pc-windows-msvc",
]

# The path where the graph output will be written as a .dot file
# dot-graph = "deny-graph.dot"

# When creating the dependency graph used as the source of truth when checking
# the graph, this field can be used to prune crates from the graph
exclude = []

# If true, metadata will be collected with `--all-features`. If false, metadata
# will be collected with `--no-default-features`. If not set, metadata collection
# will use default cargo behavior
all-features = false

# If true, metadata will be collected with `--no-default-features`. Cannot be used
# with `all-features`
no-default-features = false

# If set, these feature will be enabled when collecting metadata. If `--features`
# is specified on the command line, they will be combined with this option.
features = []

[output]
# When outputting inclusion graphs in diagnostics that include features, this
# option can be used to specify the depth at which feature edges will be added.
# This option is included since the graphs can be quite large and the addition
# of features from the crate(s) to all of the graph roots can be far too verbose.
# This option can be overridden via `--feature-depth` on the cmd line
feature-depth = 1

[advisories]
# The path where the advisory database is cloned/fetched into
db-path = "~/.cargo/advisory-db"

# The url(s) of the advisory database(s) to use
db-urls = ["https://github.com/rustsec/advisory-db"]

# The lint level for security vulnerabilities
vulnerability = "deny"

# The lint level for unmaintained crates
unmaintained = "warn"

# The lint level for crates that have been yanked from their source registry
yanked = "warn"

# The lint level for crates with security notices
notice = "warn"

# A list of advisory IDs to ignore. Note that ignored advisories will still
# output a note when they are encountered
ignore = [
    #"RUSTSEC-0000-0000",
]

# Threshold for security vulnerabilities, any vulnerability with a CVSS score
# lower than this number will be ignored. Note that ignored advisories will
# still output a note when they are encountered.
severity-threshold = 0.0

[licenses]
# The lint level for crates which do not have a detectable license
unlicensed = "deny"

# List of explicitly allowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
allow = [
    "GPL-3.0",
    "GPL-3.0-or-later",
    "MIT",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "ISC",
    "Unicode-DFS-2016",
    "CC0-1.0",
]

# List of explicitly disallowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
deny = [
    "GPL-2.0",
    "AGPL-3.0",
    "LGPL-2.0",
    "LGPL-2.1",
    "LGPL-3.0",
    "MPL-2.0",
    "CDDL-1.0",
    "CDDL-1.1",
    "EPL-1.0",
    "EPL-2.0",
    "EUPL-1.1",
    "EUPL-1.2",
]

# Lint level for when multiple versions of the same license are detected
copyleft = "warn"

# Blanket approval or denial for OSI-approved or FSF Free/Libre licenses
# * both - The license will be approved if it is both OSI-approved *AND* FSF approved
# * either - The license will be approved if it is either OSI-approved *OR* FSF approved
# * osi - The license will be approved if it is OSI approved
# * fsf - The license will be approved if it is FSF approved
# * neither - This predicate is ignored and the default lint level is used
allow-osi-fsf-free = "either"

# Lint level used when no other predicates are matched
default = "deny"

# The confidence threshold for detecting a license from a license text.
# The higher the value, the more closely the license text must match the
# canonical license text of a valid SPDX license file.
# [possible values: any between 0.0 and 1.0].
confidence-threshold = 0.8

# Allow 1 or more licenses on a per-crate basis, so that particular licenses
# aren't accepted for every possible crate as with the normal allow list
exceptions = [
    # Each entry is the crate and version constraint, and its allowed licenses
    { allow = ["OpenSSL"], name = "ring", version = "*" },
    { allow = ["ISC", "MIT", "OpenSSL"], name = "rustls-webpki", version = "*" },
]

[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"

# Lint level for when a crate version requirement is `*`
wildcards = "allow"

# The graph highlighting used when creating dotgraphs for crates
# with multiple versions
# * all - all edges are highlighted
# * first-crate-only - only the first crate in the dependency graph is highlighted
# * none - no highlighting
highlight = "all"

# The default lint level for `default` features for crates that are members
# of the workspace that is being checked. This can be overridden by allowing/denying
# `default` on a crate-by-crate basis if desired.
workspace-default-features = "allow"

# The default lint level for `default` features for external crates that are not
# members of the workspace that is being checked. This can be overridden by allowing/denying
# `default` on a crate-by-crate basis if desired.
external-default-features = "allow"

# List of crates that are allowed. Use with care!
allow = [
    #{ name = "ansi_term", version = "=0.11.0" },
]

# List of crates to deny
deny = [
    # Each entry the name of a crate and a version range. If version is
    # not specified, all versions will be matched.
    #{ name = "ansi_term", version = "=0.11.0" },
    
    # Deny old/insecure versions
    { name = "openssl", version = "<0.10.55" },
    { name = "openssl-sys", version = "<0.9.87" },
    
    # Prefer tokio over async-std for consistency
    { name = "async-std" },
    
    # Prefer indexmap over HashMap for determinism
    #{ name = "hashbrown", version = "<0.12" },
    
    # Security: Deny crates with known vulnerabilities
    { name = "time", version = "<0.2.23" },
    { name = "chrono", version = "<0.4.20" },
]

# Certain crates/versions that will be skipped when doing duplicate detection.
skip = [
    #{ name = "ansi_term", version = "=0.11.0" },
]

# Similarly to `skip` allows you to skip certain crates from being checked. Unlike `skip`,
# `skip-tree` skips the crate and all of its dependencies entirely.
skip-tree = [
    #{ name = "ansi_term", version = "=0.11.0" },
]

[sources]
# Lint level for what to happen when a crate from a crate registry that is
# not in the allow list is encountered
unknown-registry = "warn"

# Lint level for what to happen when a crate from a git repository that is not
# in the allow list is encountered
unknown-git = "warn"

# List of URLs for allowed crate registries. Defaults to the crates.io index
# if not specified. If it is specified but empty, no registries are allowed.
allow-registry = ["https://github.com/rust-lang/crates.io-index"]

# List of URLs for allowed Git repositories
allow-git = []